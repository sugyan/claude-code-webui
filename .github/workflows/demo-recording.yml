name: Demo Recording

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      scenarios:
        description: 'Demo scenarios to record (comma-separated or "all")'
        required: false
        default: 'codeGeneration'
        type: string
      themes:
        description: 'Themes to record'
        required: false
        default: 'both'
        type: choice
        options:
          - light
          - dark
          - both
      update_readme:
        description: 'Force README update regardless of comparison'
        required: false
        default: false
        type: boolean

jobs:
  record-demos:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      videos-generated: ${{ steps.check-videos.outputs.videos-generated }}
      changes-detected: ${{ steps.compare-videos.outputs.changes_detected }}
      should-update-readme: ${{ steps.compare-videos.outputs.should_update_readme }}
      readme-updated: ${{ steps.update-readme.outputs.readme_updated }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to compare with previous releases

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Install Playwright browsers
        run: npx playwright install chromium
        working-directory: frontend

      - name: Start backend server
        run: |
          cd backend
          deno task dev &
          echo $! > ../server.pid
          sleep 5  # Wait for server to start

      - name: Start frontend dev server
        run: |
          cd frontend
          npm run dev &
          echo $! > ../frontend.pid
          sleep 10  # Wait for frontend to start

      - name: Wait for servers to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
          timeout 60 bash -c 'until curl -s http://localhost:8080/api/projects > /dev/null; do sleep 1; done'
          echo "‚úÖ Servers are ready"

      - name: Record demo videos
        run: |
          cd frontend
          
          # Determine scenarios and themes
          SCENARIOS="${{ github.event.inputs.scenarios || 'codeGeneration' }}"
          THEMES="${{ github.event.inputs.themes || 'both' }}"
          
          echo "üìπ Recording scenarios: $SCENARIOS"
          echo "üé® Recording themes: $THEMES"
          
          # Record videos based on inputs
          if [ "$SCENARIOS" = "all" ]; then
            if [ "$THEMES" = "both" ]; then
              npm run record:demo all -- --theme=both
            else
              npm run record:demo all -- --theme=$THEMES
            fi
          else
            # Split scenarios by comma and record each
            IFS=',' read -ra SCENARIO_ARRAY <<< "$SCENARIOS"
            for scenario in "${SCENARIO_ARRAY[@]}"; do
              scenario=$(echo "$scenario" | xargs)  # Trim whitespace
              if [ "$THEMES" = "both" ]; then
                npm run record:demo "$scenario" -- --theme=both
              else
                npm run record:demo "$scenario" -- --theme=$THEMES
              fi
            done
          fi

      - name: Stop servers
        if: always()
        run: |
          # Stop servers gracefully
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) || true
            rm frontend.pid
          fi

      - name: Check generated videos
        id: check-videos
        run: |
          if [ -d "frontend/demo-recordings" ] && [ "$(ls -A frontend/demo-recordings/*.webm 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "videos-generated=true" >> $GITHUB_OUTPUT
            echo "üìπ Videos generated successfully:"
            ls -la frontend/demo-recordings/*.webm
          else
            echo "videos-generated=false" >> $GITHUB_OUTPUT
            echo "‚ùå No videos were generated"
            exit 1
          fi

      - name: Download reference videos from latest release
        id: download-reference
        if: steps.check-videos.outputs.videos-generated == 'true'
        continue-on-error: true
        run: |
          mkdir -p reference-videos
          
          # Get the latest release tag (excluding current tag if this is a tag push)
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            CURRENT_TAG="${{ github.ref_name }}"
            LATEST_TAG=$(git tag --sort=-version:refname | grep -v "^$CURRENT_TAG$" | head -n1)
          else
            LATEST_TAG=$(git tag --sort=-version:refname | head -n1)
          fi
          
          if [ -n "$LATEST_TAG" ]; then
            echo "üì• Downloading reference videos from release: $LATEST_TAG"
            
            # Download video artifacts from the latest release
            gh release download "$LATEST_TAG" --pattern "*.webm" --dir reference-videos || true
            
            if [ "$(ls -A reference-videos/*.webm 2>/dev/null | wc -l)" -gt 0 ]; then
              echo "reference-available=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Reference videos downloaded"
              ls -la reference-videos/
            else
              echo "reference-available=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è No reference videos found in latest release"
            fi
          else
            echo "reference-available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No previous releases found for reference"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Install FFmpeg for video comparison
        if: steps.download-reference.outputs.reference-available == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Compare videos with reference
        id: compare-videos
        if: steps.download-reference.outputs.reference-available == 'true'
        continue-on-error: true
        run: |
          cd frontend
          
          # Run video comparison
          if npx tsx scripts/compare-demo-videos.ts demo-recordings ../reference-videos 95; then
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "should_update_readme=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No significant changes detected"
          else
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "should_update_readme=true" >> $GITHUB_OUTPUT
            echo "üîÑ Significant changes detected"
          fi

      - name: Update README with new demos
        id: update-readme
        if: |
          steps.check-videos.outputs.videos-generated == 'true' && 
          (steps.compare-videos.outputs.should_update_readme == 'true' || 
           github.event.inputs.update_readme == 'true' || 
           steps.download-reference.outputs.reference-available != 'true')
        run: |
          cd frontend
          
          # Update README with new demo videos
          if npx tsx scripts/update-readme-demos.ts --videos demo-recordings --readme ../README.md; then
            echo "readme_updated=true" >> $GITHUB_OUTPUT
            echo "‚úÖ README updated with new demos"
          else
            echo "readme_updated=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è README was not updated"
          fi

      - name: Commit README changes
        if: steps.update-readme.outputs.readme_updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet README.md; then
            echo "‚ÑπÔ∏è No actual changes to commit"
          else
            git add README.md
            git commit -m "Update README with new demo videos

            ü§ñ Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            # Push changes back to the repository
            git push origin HEAD:${{ github.ref_name }} || git push origin main
            echo "‚úÖ README changes committed and pushed"
          fi

      - name: Upload demo videos as artifacts
        if: steps.check-videos.outputs.videos-generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: demo-videos-${{ github.run_id }}
          path: frontend/demo-recordings/*.webm
          retention-days: 90

      - name: Upload demo videos to release (if tag push)
        if: |
          github.event_name == 'push' && 
          startsWith(github.ref, 'refs/tags/') && 
          steps.check-videos.outputs.videos-generated == 'true'
        run: |
          # Upload videos to the current release
          cd frontend/demo-recordings
          
          for video in *.webm; do
            if [ -f "$video" ]; then
              echo "üì§ Uploading $video to release ${{ github.ref_name }}"
              gh release upload "${{ github.ref_name }}" "$video" --clobber
            fi
          done
          
          echo "‚úÖ Demo videos uploaded to release"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Summary
        if: always()
        run: |
          echo "## Demo Recording Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Videos Generated | ${{ steps.check-videos.outputs.videos-generated == 'true' && '‚úÖ Yes' || '‚ùå No' }} | ${{ steps.check-videos.outputs.videos-generated == 'true' && 'Demo videos recorded successfully' || 'No videos were generated' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Reference Available | ${{ steps.download-reference.outputs.reference-available == 'true' && '‚úÖ Yes' || '‚ö†Ô∏è No' }} | ${{ steps.download-reference.outputs.reference-available == 'true' && 'Previous videos downloaded for comparison' || 'No reference videos available' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Changes Detected | ${{ steps.compare-videos.outputs.changes_detected == 'true' && 'üîÑ Yes' || '‚úÖ No' }} | ${{ steps.compare-videos.outputs.changes_detected == 'true' && 'Significant changes found in videos' || 'Videos are similar to previous version' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| README Updated | ${{ steps.update-readme.outputs.readme_updated == 'true' && '‚úÖ Yes' || '‚ÑπÔ∏è No' }} | ${{ steps.update-readme.outputs.readme_updated == 'true' && 'README updated with new demo videos' || 'README was not modified' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-videos.outputs.videos-generated }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Generated Videos" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cd frontend/demo-recordings
            for video in *.webm; do
              if [ -f "$video" ]; then
                size=$(du -h "$video" | cut -f1)
                echo "- üìπ \`$video\` ($size)" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi