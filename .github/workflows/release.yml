name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: claude-code-webui-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: claude-code-webui-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: claude-code-webui-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: claude-code-webui-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Copy frontend dist to backend
        run: |
          rm -rf backend/dist
          cp -r frontend/dist backend/dist

      - name: Build backend binary
        run: deno compile --allow-net --allow-run --allow-read --allow-env --include ./VERSION --include ./dist --target ${{ matrix.target }} --output ../dist/${{ matrix.artifact_name }} main.ts
        working-directory: backend

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}*

  demo-recording:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      videos-generated: ${{ steps.demo-workflow.outputs.videos-generated }}
    steps:
      - name: Trigger demo recording workflow
        id: demo-workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'demo-recording.yml',
              ref: context.ref,
              inputs: {
                scenarios: 'codeGeneration',
                themes: 'both',
                update_readme: 'false'
              }
            });
            
            // Wait a moment for the workflow to start
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // Find the workflow run
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'demo-recording.yml',
              head_sha: context.sha,
              per_page: 1
            });
            
            if (runs.workflow_runs.length > 0) {
              const runId = runs.workflow_runs[0].id;
              console.log(`Demo recording workflow started: ${runId}`);
              
              // Wait for the workflow to complete (with timeout)
              let attempts = 0;
              const maxAttempts = 60; // 30 minutes max
              
              while (attempts < maxAttempts) {
                const { data: run } = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: runId
                });
                
                if (run.status === 'completed') {
                  console.log(`Demo recording completed with conclusion: ${run.conclusion}`);
                  core.setOutput('videos-generated', run.conclusion === 'success' ? 'true' : 'false');
                  break;
                }
                
                console.log(`Waiting for demo recording... (${attempts + 1}/${maxAttempts})`);
                await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
                attempts++;
              }
              
              if (attempts >= maxAttempts) {
                console.log('Demo recording workflow timed out');
                core.setOutput('videos-generated', 'false');
              }
            } else {
              console.log('No demo recording workflow run found');
              core.setOutput('videos-generated', 'false');
            }

  release:
    needs: [build, demo-recording]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Download demo videos if available
        if: needs.demo-recording.outputs.videos-generated == 'true'
        continue-on-error: true
        run: |
          # Try to download demo videos from the demo-recording workflow
          mkdir -p ./demo-videos
          
          # Get the latest demo recording workflow run for this commit
          DEMO_RUN_ID=$(gh run list --workflow=demo-recording.yml --commit=${{ github.sha }} --limit=1 --json databaseId --jq='.[0].databaseId')
          
          if [ -n "$DEMO_RUN_ID" ] && [ "$DEMO_RUN_ID" != "null" ]; then
            echo "üì• Downloading demo videos from workflow run: $DEMO_RUN_ID"
            gh run download $DEMO_RUN_ID --name demo-videos-* --dir ./demo-videos || true
            
            if [ "$(find ./demo-videos -name '*.webm' 2>/dev/null | wc -l)" -gt 0 ]; then
              echo "‚úÖ Demo videos downloaded successfully"
              ls -la ./demo-videos/
            else
              echo "‚ö†Ô∏è No demo videos found in artifacts"
            fi
          else
            echo "‚ö†Ô∏è No demo recording workflow run found for this commit"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/*
            demo-videos/**/*.webm
          generate_release_notes: true
          draft: false
          prerelease: false
