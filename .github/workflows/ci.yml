name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend:
    name: Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22, 24]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Generate version.ts
        run: cd backend && node scripts/generate-version.js

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install and cache Deno dependencies
        run: cd backend && deno install && deno cache cli/deno.ts

      - name: Format check (Deno)
        run: cd backend && deno task format:check

      - name: Format check (Prettier)
        run: cd backend && npm run format:check

      - name: Lint (Deno)
        run: cd backend && deno task lint

      - name: Lint (ESLint)
        run: cd backend && npm run lint

      - name: Type check (Deno)
        run: cd backend && deno task check

      - name: Type check (TypeScript)
        run: cd backend && npm run typecheck

      - name: Test
        run: cd backend && npm run test

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22, 24]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Format check
        run: cd frontend && npm run format:check

      - name: Lint
        run: cd frontend && npm run lint

      - name: Type check
        run: cd frontend && npm run typecheck

      - name: Test
        run: cd frontend && npm test

      - name: Build
        run: cd frontend && npm run build

  # Summary job for branch protection rules
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.backend.result }}" == "success" && "${{ needs.frontend.result }}" == "success" ]]; then
            echo "All CI jobs passed"
            exit 0
          else
            echo "Some CI jobs failed"
            exit 1
          fi
